// =========================================
// EMS-SEP490-BE: Database Schema Visualization
// PostgreSQL 16 Schema Definition in DBML
// Generated for https://dbdiagram.io/d
// =========================================

// =========================================
// ENUMS
// =========================================

Enum session_status_enum {
  planned
  cancelled
  done
}

Enum session_type_enum {
  class
  makeup
  exam
  other
}

Enum attendance_status_enum {
  planned
  present
  absent
  late
  excused
  remote
}

Enum enrollment_status_enum {
  enrolled
  waitlisted
  transferred
  dropped
  completed
}

Enum request_status_enum {
  pending
  waiting_confirm
  approved
  rejected
  cancelled
}

Enum teacher_request_type_enum {
  leave
  swap
  ot
  reschedule
}

Enum student_request_type_enum {
  absence
  makeup
  transfer
  reschedule
}

Enum resource_type_enum {
  room
  virtual
}

Enum modality_enum {
  offline
  online
  hybrid
}

Enum skill_enum {
  general
  reading
  writing
  speaking
  listening
}

Enum teaching_role_enum {
  primary
  assistant
}

Enum branch_status_enum {
  active
  inactive
  closed
  planned
}

Enum class_status_enum {
  draft
  scheduled
  ongoing
  completed
  cancelled
}

Enum subject_status_enum {
  active
  inactive
}

Enum assessment_kind_enum {
  quiz
  midterm
  final
  assignment
  project
  oral
  practice
  other
}

Enum teaching_slot_status_enum {
  scheduled
  on_leave
  substituted
  completed
  cancelled
}

Enum homework_status_enum {
  completed
  incomplete
  no_homework
}

// =========================================
// TIER 1: INDEPENDENT TABLES (No Foreign Keys)
// =========================================

Table center {
  id bigserial [primary key]
  code varchar(255) [not null, unique]
  name varchar(255) [not null]
  description text
  phone varchar(50)
  email varchar(255)
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [default: `CURRENT_TIMESTAMP`]

  Note: 'Top-level organization entity representing a training center'
}

Table role {
  id bigserial [primary key]
  code varchar(50) [not null, unique]
  name varchar(255) [not null]

  Note: 'RBAC roles: ADMIN, MANAGER, CENTER_HEAD, ACADEMIC_STAFF, SUBJECT_LEADER, TEACHER, STUDENT, QA'
}

Table user_account {
  id bigserial [primary key]
  email varchar(255) [unique]
  phone varchar(50)
  full_name varchar(255) [not null]
  password_hash varchar(255) [not null]
  status varchar(50)
  last_login_at timestamptz
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [default: `CURRENT_TIMESTAMP`]

  Note: 'Base user account for all system users'
}

// =========================================
// TIER 2: DEPENDS ON TIER 1
// =========================================

Table branch {
  id bigserial [primary key]
  center_id bigint [not null, ref: > center.id]
  code varchar(50) [not null]
  name varchar(255) [not null]
  address text
  location varchar(255)
  phone varchar(50)
  capacity integer
  status branch_status_enum [not null, default: 'active']
  opening_date date
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [default: `CURRENT_TIMESTAMP`]

  indexes {
    (center_id, code) [unique]
  }

  Note: 'Physical location/branch of a center'
}

Table subject {
  id bigserial [primary key]
  code varchar(50) [not null, unique]
  name varchar(255) [not null]
  description text
  status subject_status_enum [not null, default: 'active']
  created_by bigint [ref: > user_account.id]
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [default: `CURRENT_TIMESTAMP`]

  Note: 'Subject domain (e.g., English, Japanese)'
}

Table time_slot_template {
  id bigserial [primary key]
  branch_id bigint [not null, ref: > branch.id]
  name varchar(255) [not null]
  start_time time [not null]
  end_time time [not null]
  duration_min integer
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [default: `CURRENT_TIMESTAMP`]

  Note: 'Defines allowed class time slots per branch'
}

Table resource {
  id bigserial [primary key]
  branch_id bigint [not null, ref: > branch.id]
  resource_type resource_type_enum [not null]
  name varchar(255) [not null]
  location varchar(255)
  capacity integer
  description text
  equipment text
  meeting_url varchar(500)
  meeting_id varchar(255)
  account_email varchar(255)
  license_type varchar(100)
  expiry_date date
  renewal_date date
  created_by bigint [ref: > user_account.id]
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [default: `CURRENT_TIMESTAMP`]

  Note: 'Unified model for ROOM (physical) and VIRTUAL (Zoom/online) resources'
}

Table user_role {
  user_id bigint [not null, ref: > user_account.id]
  role_id bigint [not null, ref: > role.id]

  indexes {
    (user_id, role_id) [pk]
  }

  Note: 'Many-to-many mapping of users to roles'
}

Table user_branches {
  user_id bigint [not null, ref: > user_account.id]
  branch_id bigint [not null, ref: > branch.id]
  assigned_at timestamptz [default: `CURRENT_TIMESTAMP`]
  assigned_by bigint [ref: > user_account.id]

  indexes {
    (user_id, branch_id) [pk]
  }

  Note: 'Multi-branch access control for users'
}

Table teacher {
  id bigserial [primary key]
  user_account_id bigint [not null, unique, ref: - user_account.id]
  employee_code varchar(50) [unique]
  note text
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  Note: '1:1 mapping with UserAccount for teachers'
}

Table student {
  id bigserial [primary key]
  user_id bigint [not null, unique, ref: - user_account.id]
  student_code varchar(50) [unique]
  branch_id bigint [ref: > branch.id]
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  Note: '1:1 mapping with UserAccount for students'
}

// =========================================
// TIER 3: ACADEMIC CURRICULUM HIERARCHY
// =========================================

Table level {
  id bigserial [primary key]
  subject_id bigint [not null, ref: > subject.id]
  code varchar(50) [not null]
  name varchar(255) [not null]
  standard_type varchar(100)
  expected_duration_hours integer
  sort_order integer
  description text
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  indexes {
    (subject_id, code) [unique]
  }

  Note: 'Proficiency levels within a subject (e.g., A1, A2, B1)'
}

Table course {
  id bigserial [primary key]
  subject_id bigint [not null, ref: > subject.id]
  level_id bigint [ref: > level.id]
  logical_course_code varchar(100)
  version integer
  code varchar(100) [not null, unique]
  name varchar(255) [not null]
  description text
  total_hours integer
  duration_weeks integer
  session_per_week integer
  hours_per_session decimal(5,2)
  prerequisites text
  target_audience text
  teaching_methods text
  effective_date date
  status varchar(50)
  approved_by_manager bigint [ref: > user_account.id]
  approved_at timestamptz
  rejection_reason text
  hash_checksum varchar(255)
  created_by bigint [ref: > user_account.id]
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [default: `CURRENT_TIMESTAMP`]

  Note: 'Course template (approved by Manager) used to create classes'
}

Table course_phase {
  id bigserial [primary key]
  course_id bigint [not null, ref: > course.id]
  phase_number integer [not null]
  name varchar(255)
  duration_weeks integer
  learning_focus text
  sort_order integer
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  indexes {
    (course_id, phase_number) [unique]
  }

  Note: 'Phases within a course (e.g., foundation, intermediate, advanced)'
}

Table course_session {
  id bigserial [primary key]
  phase_id bigint [not null, ref: > course_phase.id]
  sequence_no integer [not null]
  topic varchar(500)
  student_task text
  skill_set varchar // skill_enum[] in PostgreSQL
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  indexes {
    (phase_id, sequence_no) [unique]
  }

  Note: 'Template sessions within a phase - basis for generating actual sessions'
}

Table course_material {
  id bigserial [primary key]
  course_id bigint [not null, ref: > course.id]
  phase_id bigint [ref: > course_phase.id]
  course_session_id bigint [ref: > course_session.id]
  title varchar(500) [not null]
  url varchar(1000) [not null]
  uploaded_by bigint [ref: > user_account.id]
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
}

Table plo {
  id bigserial [primary key]
  subject_id bigint [not null, ref: > subject.id]
  code varchar(50) [not null]
  description text [not null]
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  indexes {
    (subject_id, code) [unique]
  }

  Note: 'Program Learning Outcomes at subject level'
}

Table clo {
  id bigserial [primary key]
  course_id bigint [not null, ref: > course.id]
  code varchar(50) [not null]
  description text [not null]
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  indexes {
    (course_id, code) [unique]
  }

  Note: 'Course Learning Outcomes at course level'
}

Table plo_clo_mapping {
  plo_id bigint [not null, ref: > plo.id]
  clo_id bigint [not null, ref: > clo.id]
  status varchar(50)

  indexes {
    (plo_id, clo_id) [pk]
  }

  Note: 'Maps CLOs to PLOs for outcome tracking'
}

Table course_session_clo_mapping {
  course_session_id bigint [not null, ref: > course_session.id]
  clo_id bigint [not null, ref: > clo.id]
  status varchar(50)

  indexes {
    (course_session_id, clo_id) [pk]
  }

  Note: 'Maps course sessions to CLOs'
}

Table course_assessment {
  id bigserial [primary key]
  course_id bigint [not null, ref: > course.id]
  name varchar(255) [not null]
  kind assessment_kind_enum [not null]
  max_score decimal(5,2) [not null]
  weight decimal(5,2)
  description text
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  Note: 'Define assessment templates at course level to be cloned when creating classes'
}

Table course_assessment_clo_mapping {
  course_assessment_id bigint [not null, ref: > course_assessment.id]
  clo_id bigint [not null, ref: > clo.id]
  status varchar(50)

  indexes {
    (course_assessment_id, clo_id) [pk]
  }

  Note: 'Map which CLOs are assessed by each course assessment'
}

// =========================================
// TIER 4: OPERATIONS (Classes and Sessions)
// =========================================

Table class {
  id bigserial [primary key]
  branch_id bigint [not null, ref: > branch.id]
  course_id bigint [not null, ref: > course.id]
  code varchar(50) [not null]
  name varchar(255)
  modality modality_enum [not null]
  start_date date [not null]
  planned_end_date date
  actual_end_date date
  schedule_days varchar // smallint[] in PostgreSQL
  status class_status_enum [not null, default: 'draft']
  created_by bigint [ref: > user_account.id]
  submitted_at timestamptz
  approved_by bigint [ref: > user_account.id]
  approved_at timestamptz
  rejection_reason text
  created_at timestamptz [default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [default: `CURRENT_TIMESTAMP`]

  indexes {
    (branch_id, code) [unique]
  }

  Note: 'Class instance (scheduled offering of a course at a branch)'
}

Table session {
  id bigserial [primary key]
  class_id bigint [ref: > class.id]
  course_session_id bigint [ref: > course_session.id]
  time_slot_template_id bigint [ref: > time_slot_template.id]
  date date [not null]
  type session_type_enum [not null, default: 'class']
  status session_status_enum [not null, default: 'planned']
  teacher_note text
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  Note: 'SINGLE SOURCE OF TRUTH for schedule - auto-generated from course template'
}

Table teacher_skill {
  teacher_id bigint [not null, ref: > teacher.id]
  skill skill_enum [not null]
  level smallint

  indexes {
    (teacher_id, skill) [pk]
  }

  Note: 'Teacher skills: GENERAL, READING, WRITING, SPEAKING, LISTENING'
}

Table teacher_availability {
  teacher_id bigint [not null, ref: > teacher.id]
  time_slot_template_id bigint [not null, ref: > time_slot_template.id]
  day_of_week smallint [not null, note: 'CHECK: 1-7']
  effective_date date
  note text
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  indexes {
    (teacher_id, time_slot_template_id, day_of_week) [pk]
  }

  Note: 'Regular weekly availability patterns for teachers (managed by Academic Staff)'
}

Table session_resource {
  session_id bigint [not null, ref: > session.id]
  resource_type resource_type_enum [not null]
  resource_id bigint [not null, ref: > resource.id]
  capacity_override integer

  indexes {
    (session_id, resource_type, resource_id) [pk]
  }

  Note: 'Resource allocation per session (room or virtual)'
}

Table teaching_slot {
  session_id bigint [not null, ref: > session.id]
  teacher_id bigint [not null, ref: > teacher.id]
  skill skill_enum [not null]
  role teaching_role_enum [not null]
  status teaching_slot_status_enum [not null, default: 'scheduled']

  indexes {
    (session_id, teacher_id, skill) [pk]
  }

  Note: 'Teacher assignment to session with skill and role'
}

Table enrollment {
  id bigserial [primary key]
  class_id bigint [not null, ref: > class.id]
  student_id bigint [not null, ref: > student.id]
  status enrollment_status_enum [not null, default: 'enrolled']
  enrolled_at timestamptz
  left_at timestamptz
  join_session_id bigint [ref: > session.id]
  left_session_id bigint [ref: > session.id]
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  indexes {
    (class_id, student_id) [unique]
  }

  Note: 'Student registration in a class'
}

Table student_session {
  student_id bigint [not null, ref: > student.id]
  session_id bigint [not null, ref: > session.id]
  is_makeup boolean [default: false]
  attendance_status attendance_status_enum [not null, default: 'planned']
  homework_status homework_status_enum
  note text
  recorded_at timestamptz

  indexes {
    (student_id, session_id) [pk]
  }

  Note: 'Individual student attendance record per session - auto-generated on enrollment'
}

// =========================================
// TIER 5: ASSESSMENT & FEEDBACK
// =========================================

Table assessment {
  id bigserial [primary key]
  class_id bigint [not null, ref: > class.id]
  course_assessment_id bigint [ref: > course_assessment.id]
  name varchar(255) [not null]
  kind assessment_kind_enum [not null]
  max_score decimal(5,2) [not null]
  weight decimal(5,2)
  description text
  created_by bigint [ref: > user_account.id]
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  Note: 'Assessment definition within a class (quiz, midterm, final, etc.)'
}

Table score {
  id bigserial [primary key]
  assessment_id bigint [not null, ref: > assessment.id]
  student_id bigint [not null, ref: > student.id]
  score decimal(5,2) [not null]
  feedback text
  graded_by bigint [ref: > teacher.id]
  graded_at timestamptz

  indexes {
    (assessment_id, student_id) [unique]
  }

  Note: 'Student scores for assessments'
}

Table student_feedback {
  id bigserial [primary key]
  student_id bigint [not null, ref: > student.id]
  session_id bigint [not null, ref: > session.id]
  phase_id bigint [ref: > course_phase.id]
  rating smallint [note: 'CHECK: 1-5']
  comment text
  is_feedback boolean [default: false]
  submitted_at timestamptz

  Note: 'Student feedback for sessions/phases'
}

Table qa_report {
  id bigserial [primary key]
  class_id bigint [ref: > class.id]
  session_id bigint [ref: > session.id]
  phase_id bigint [ref: > course_phase.id]
  reported_by bigint [ref: > user_account.id]
  report_type varchar(100)
  status varchar(50)
  findings text
  action_items text
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  Note: 'Quality assurance reports for monitoring'
}

// =========================================
// TIER 6: REQUEST WORKFLOWS
// =========================================

Table student_request {
  id bigserial [primary key]
  student_id bigint [not null, ref: > student.id]
  current_class_id bigint [ref: > class.id]
  request_type student_request_type_enum [not null]
  target_class_id bigint [ref: > class.id]
  target_session_id bigint [ref: > session.id]
  makeup_session_id bigint [ref: > session.id]
  effective_date date
  effective_session_id bigint [ref: > session.id]
  status request_status_enum [not null, default: 'pending']
  submitted_at timestamptz
  submitted_by bigint [ref: > user_account.id]
  decided_by bigint [ref: > user_account.id]
  decided_at timestamptz
  note text
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  Note: 'Student requests: absence, makeup, transfer, reschedule'
}

Table teacher_request {
  id bigserial [primary key]
  teacher_id bigint [not null, ref: > teacher.id]
  session_id bigint [ref: > session.id]
  request_type teacher_request_type_enum [not null]
  replacement_teacher_id bigint [ref: > teacher.id]
  new_date date
  new_time_slot_id bigint [ref: > time_slot_template.id]
  new_resource_id bigint [ref: > resource.id]
  reason text
  resolution text
  status request_status_enum [not null, default: 'pending']
  submitted_at timestamptz
  submitted_by bigint [ref: > user_account.id]
  decided_by bigint [ref: > user_account.id]
  decided_at timestamptz
  note text
  created_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]
  updated_at timestamptz [not null, default: `CURRENT_TIMESTAMP`]

  Note: 'Teacher requests: leave, swap, OT, reschedule'
}
